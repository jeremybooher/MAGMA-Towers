/*
Our code doesn't work with multiple points of ramification or other bases, but MAGMA's builtin functions do (albeit much slower)
*/

//Produce Examples of Towers Using MAGMA's Witt vector functionality.
//K<t> := RationalFunctionField(GF(p^r));
// n : how many levels
//vs : a list of elements of K
//The tower is a Teichmuller tower: y^F - y = \sum [vs[i],0,0,...] 
function magma_ASW_example(K,n,vs)
	assert(n gt 0);
	t1 := Realtime();
	W:=WittRing(K,n);
	
	wv := W![0 : i in [1..n]];
	printform := "";
	for term in vs do
		wv +:= W!([term] cat [0 : i in [1..n-1]]);
		printform := printform cat "+" cat Sprint(term);
	end for;
	
	L := FunctionField(wv);
	t2 :=Realtime();
	print "Constructing Function Field took: ", t2-t1;
	
	field_list := [L];
	count :=1 ;
	while count lt n do
		count +:=1;
		L := BaseField(L);
		field_list := [L] cat field_list;
	end while;
	
	return field_list;
end function;

//Compute a-number of a function field using MAGMA's built in functions
//Computing the genus (finding a basis of regular differentials) seems to be slowest
function default_anumber(K : printing:=true)
	if printing then
		print "Computing Genus...";
	end if;
	t1:=Realtime();
	g := Genus(K);
	t2:=Realtime();
	if printing then	
		print "Took: ",t2-t1;
	end if;
	r := Rank(CartierRepresentation(K));
	t3:=Realtime();
	if printing then
		print "a-number Took: ",t3-t2;
	end if;
	return g- r;
end function;

//Compute a=numbers for n levels of ASW tower given by vs over K
procedure compute_anumbers(K,n,vs)
	field_list := magma_ASW_example(K,n,vs);
	
	for i in [1..n] do
		print "Level:",i," a-number:",default_anumber(field_list[i] : printing:=false);
	end for;
end procedure;

procedure example_multiple_ramification()
	p:=3 ;
	K<x> := FunctionField(GF(p));
	print "x^ 5 + x^(-5)";
	compute_anumbers(K,4,[x^ 5 + x^(-5)]);
	print "x^ 7 + x^(-5)";
	compute_anumbers(K,4,[x^ 7 + x^(-5)]);
end procedure;

/*
My computation with x^5 + x^(-5) gave

Level: 1  a-number: 4
Level: 2  a-number: 36
Level: 3  a-number: 306
Level: 4  a-number: 2736

For comparison, if you look at the [x^5] tower, you have a-numbers 2, 19, 154, 1369.  For the original tower, the a-numbers are 2 *( number for [x^5] tower) -2, except at the first level.

x^ 7 + x^(-5)

Constructing Function Field took:  5.240

Computing Genus...

Took:  0.030

a-number Took:  0.000

Level: 1  a-number: 6

Computing Genus...

Took:  0.020

a-number Took:  0.140

Level: 2  a-number: 44

Computing Genus...

Took:  4.310

a-number Took:  81.890

Level: 3  a-number: 368

Computing Genus...

Took:  85303.560

a-number Took:  137484.080

Level: 4  a-number: 3284
*/

//Example with Igusa Tower in Characteristic 3
//Compute tower over X_1(5) using an explicit equation for the universal curve,
//  y^2 + (1 + t)xy + ty = x^3 + tx^2
//and then adjoining points in the kernel of V: E^{p^n} \to E to construct the nth level of the Igusa tower
procedure example_igusa()
	p:= 3;

	
	K<t>:=RationalFunctionField(GF(3));
	E:= EllipticCurve([1+t,t,t,0,0]);// Universal curve with 5-torsion point
	MultiplicationByMMap(E,3);// Compute V in coordinates by computing mult by 3

	f:=function(z,y,w)//Encodes V P = Q; we'll iterate to get the Igusa tower over X1(5) over F_3
	return (1/(z^4 + 2*z^2 + 1)*y^3 + (2*z^2 +2*z)/(z^2 + 1)*y^2 + (2*z^5 + z^4)/(z^2 + 1)*y + 2*z^7/(z^4 + 2*z^2 + 1)) - w*(y^2 + 2*z^3/(z^2 +1)*y + z^6/(z^4 + 2*z^2 + 1));
	end function;
	R1<x1>:=PolynomialRing(K);

	Factorization(f(t^3,x1,0));// First layer is a degree 2 extension, obtained by adjoining all roots of f(t^3,x1,0) = 0. Remember that point at infinity has x-coord 0.

	L1<t1>:=ext<K| x1^2 + (2*t^12 + t^9 + 2*t^6 + 2*t^3)*x1 + 2*t^12>;

	R2<x2>:=PolynomialRing(L1);
	L2<t2>:=ext<L1| f(t^9,x2,t1)>;

	R3<x3>:=PolynomialRing(L2);
	L3<t3>:=ext<L2| f(t^27,x3,t2)>;

	R4<x4>:=PolynomialRing(L3);
	L4<t4>:=ext<L3| f(t^81,x4,t3)>;



	//V1:=CartierRepresentation(L1);
	//for i in [1..3]do
	// Dimension(Kernel(V1^i));
	//end for;

	//V2:=CartierRepresentation(L2);
	//for i in [1..3]do
	// Dimension(Kernel(V2^i));
	//end for;

	//V3:=CartierRepresentation(L3);
	//for i in [1..3]do
	// Dimension(Kernel(V3^i));
	//end for;

	V4:=CartierRepresentation(L4);
	for i in [1..3]do
		Dimension(Kernel(V4^i));
	end for; //this ran for over 959 hours using 22G of memory without finishing
	
end procedure;


/*
Our code doesn't work with multiple points of ramification or other bases, but MAGMA's builtin functions do (albeit much slower)
*/

//Produce Examples of Towers Using MAGMA's Witt vector functionality.
//K<t> := RationalFunctionField(GF(p^r));
// n : how many levels
//vs : a list of elements of K
//The tower is a Teichmuller tower: y^F - y = \sum [vs[i],0,0,...] 
function magma_ASW_example(K,n,vs)
	assert(n gt 0);
	t1 := Realtime();
	W:=WittRing(K,n);
	
	wv := W![0 : i in [1..n]];
	printform := "";
	for term in vs do
		wv +:= W!([term] cat [0 : i in [1..n-1]]);
		printform := printform cat "+" cat Sprint(term);
	end for;
	
	L := FunctionField(wv);
	t2 :=Realtime();
	print "Constructing Function Field took: ", t2-t1;
	
	field_list := [L];
	count :=1 ;
	while count lt n do
		count +:=1;
		L := BaseField(L);
		field_list := [L] cat field_list;
	end while;
	
	return field_list;
end function;

//Compute a-number of a function field using MAGMA's built in functions
//Computing the genus (finding a basis of regular differentials) seems to be slowest
function default_anumber(K : printing:=true, powers:=1)
	if printing then
		print "Computing Genus...";
	end if;
	t1:=Realtime();
	g := Genus(K);
	print "Genus is ",g;
	t2:=Realtime();
	if printing then	
		print "Took: ",t2-t1;
	end if;
	C := CartierRepresentation(K);
	
	index:=1;
	A:= C;
	
	data := [];
	
	while index le powers do
		Append(~data,Dimension(Kernel(A)));  
		index+:=1;
		A *:= C;
	end while;

	t3:=Realtime();
	if printing then
		print "Invariants Took: ",t3-t2;
	end if;
	return data;
end function;

//Compute a=numbers for n levels of ASW tower given by vs over K
procedure compute_anumbers(K,n,vs: powers:=5)
	field_list := magma_ASW_example(K,n,vs);
	
	for i in [1..n] do
		print "Level:",i," a-number:",default_anumber(field_list[i] : printing:=false, powers:=powers);
	end for;
end procedure;

procedure example_multiple_ramification()
	p:=3 ;
	K<x> := FunctionField(GF(p));
	print "x^ 5 + x^(-5)";
	compute_anumbers(K,4,[x^ 5 + x^(-5)]);
	print "x^ 7 + x^(-5)";
	compute_anumbers(K,4,[x^ 7 + x^(-5)]);
end procedure;

/*
My computation with x^5 + x^(-5) gave

Level: 1  a-number: 4
Level: 2  a-number: 36
Level: 3  a-number: 306
Level: 4  a-number: 2736

For comparison, if you look at the [x^5] tower, you have a-numbers 2, 19, 154, 1369.  For the original tower, the a-numbers are 2 *( number for [x^5] tower) -2, except at the first level.

x^ 7 + x^(-5)

Constructing Function Field took:  5.240

Computing Genus...

Took:  0.030

a-number Took:  0.000

Level: 1  a-number: 6

Computing Genus...

Took:  0.020

a-number Took:  0.140

Level: 2  a-number: 44

Computing Genus...

Took:  4.310

a-number Took:  81.890

Level: 3  a-number: 368

Computing Genus...

Took:  85303.560

a-number Took:  137484.080

Level: 4  a-number: 3284
*/

procedure example_multiple_ramification2()
	p:=2 ;
	K<x> := FunctionField(GF(p));
	print "x^ 3 + x^(-3) + (x-1)^(-5)";
	//fifth level seems to take > 1 day, so just use 4
	compute_anumbers(K,4,[x^ 3 + x^(-3) + (x-1)^(-5)]); 
	print "x^ 3 + x + x^(-3) + (x-1)^(-7)";
	compute_anumbers(K,4,[x^ 3 + x + x^(-3) + (x-1)^(-7)]);
end procedure;

//Example with Igusa Tower in Characteristic 3
//Compute tower over X_1(5) using an explicit equation for the universal curve,
//  y^2 + (1 + t)xy + ty = x^3 + tx^2
//and then adjoining points in the kernel of V: E^{p^n} \to E to construct the nth level of the Igusa tower
procedure example_igusa()
	p:= 3;

	
	K<t>:=RationalFunctionField(GF(3));
	E:= EllipticCurve([1+t,t,t,0,0]);// Universal curve with 5-torsion point
	MultiplicationByMMap(E,3);// Compute V in coordinates by computing mult by 3

	f:=function(z,y,w)//Encodes V P = Q; we'll iterate to get the Igusa tower over X1(5) over F_3
	return (1/(z^4 + 2*z^2 + 1)*y^3 + (2*z^2 +2*z)/(z^2 + 1)*y^2 + (2*z^5 + z^4)/(z^2 + 1)*y + 2*z^7/(z^4 + 2*z^2 + 1)) - w*(y^2 + 2*z^3/(z^2 +1)*y + z^6/(z^4 + 2*z^2 + 1));
	end function;
	R1<x1>:=PolynomialRing(K);

	Factorization(f(t^3,x1,0));// First layer is a degree 2 extension, obtained by adjoining all roots of f(t^3,x1,0) = 0. Remember that point at infinity has x-coord 0.

	L1<t1>:=ext<K| x1^2 + (2*t^12 + t^9 + 2*t^6 + 2*t^3)*x1 + 2*t^12>;

	R2<x2>:=PolynomialRing(L1);
	L2<t2>:=ext<L1| f(t^9,x2,t1)>;

	R3<x3>:=PolynomialRing(L2);
	L3<t3>:=ext<L2| f(t^27,x3,t2)>;

	R4<x4>:=PolynomialRing(L3);
	L4<t4>:=ext<L3| f(t^81,x4,t3)>;



	//V1:=CartierRepresentation(L1);
	//for i in [1..3]do
	// Dimension(Kernel(V1^i));
	//end for;

	//V2:=CartierRepresentation(L2);
	//for i in [1..3]do
	// Dimension(Kernel(V2^i));
	//end for;

	//V3:=CartierRepresentation(L3);
	//for i in [1..3]do
	// Dimension(Kernel(V3^i));
	//end for;

	V4:=CartierRepresentation(L4);
	for i in [1..3]do
		Dimension(Kernel(V4^i));
	end for; //this ran for over 959 hours using 22G of memory without finishing
	
end procedure;

//do an example over a base curve which is not P^1 (or an ASW extension of P^1)
//again, can't use our program, so it will be slower
procedure other_base()
	p:=3 ;
	
	K:=GF(p);
	R<x>:=FunctionField(K);
	P<y> := PolynomialRing(R);
	f := x^5 +x^2 +  1;
	deg_f := Degree(f);
	F<alpha> := ext< R | y^2 -  f >;
	
	assert( Genus(F) eq 2); //if not 2, then not getting hyperelliptic curve as y^2 =f must be singular
	
	print Divisor(x *alpha);
	compute_anumbers(F,4,[x*alpha]);

end procedure;

//do an example over a base curve which is not P^1 (or an ASW extension of P^1) in characteristic 2
//again, can't use our program, so it will be slower, but can get more levels
procedure other_base2()
	p:=2 ;
	
	K:=GF(p);
	R<x>:=FunctionField(K);
	P<y> := PolynomialRing(R);
	f := x^5 +x^2 +  1;
	deg_f := Degree(f);
	F<alpha> := ext< R | y^2 - x* y-  f >;
	
	assert( Genus(F) eq 2); //if not 2, then not getting hyperelliptic curve as y^2 =f must be singular
	
	print Divisor(x *alpha);
	compute_anumbers(F,4,[x*alpha]);

end procedure;

/*
Genus is  7
Level: 1  a-number: [ 2, 4, 5, 5, 5 ]
Genus is  24
Level: 2  a-number: [ 5, 9, 12, 14, 16 ]
Genus is  86
Level: 3  a-number: [ 21, 32, 41, 47, 52 ]
Genus is  322
Level: 4  a-number: [ 77, 122, 153, 176, 197 ]
*/



//do an example of a sequence of Artin-Schrier extensions which don't form a Z_3 -tower
procedure not_tower1()
	p := 3;
	K0<t0> := FunctionField(GF(p));

	P1<y1> := PolynomialRing(K0);
	f1 := t0^7;
	d1:=7;
	K1<y1> := FunctionField(y1^p - y1 - f1);
	
	P2<y2> := PolynomialRing(K1);
	f2 := y1 * t0^(14);
	d2:= 49;
	Support(Divisor(f2));
	K2<y2> := FunctionField(y2^p - y2 - f2);
	
	print "Constructed Level 2";
	
	P3<y3> := PolynomialRing(K2);
	f3 := y2 * t0^(42);
	d3:= 427;
	K3<y3> := FunctionField(y3^p - y3 - f3);
	
	print "Constructed Level 3";
	
	P4<y4>:=PolynomialRing(K3);
	f4 := y3 * t0^(126);
	d4:=3829;
	K4<y4> := FunctionField(y4^p - y4 - f4);
	
	print "Constructed Level 4";
		
	for L in [K1,K2,K3,K4] do
		print L;
		print default_anumber(L : powers:=5);
	end for;
end procedure;

/* Not Tower 1
% Algebraic function field defined over Univariate rational function field over 
% GF(3) by
% y1^3 + 2*y1 + 2*t0^7
% Computing Genus...
% Took:  0.030
% Invariants Took:  0.000
% [ 4, 5, 6, 6, 6 ]
% Algebraic function field defined over K1 by
% y2^3 + 2*y2 + 2*t0^14*y1
% Computing Genus...
% Took:  0.020
% Invariants Took:  0.040
% [ 27, 39, 49, 54, 58 ]
% Algebraic function field defined over K2 by
% y3^3 + 2*y3 + 2*t0^42*y2
% Computing Genus...
% Took:  0.980
% Invariants Took:  3.500
% [ 231, 364, 442, 490, 525 ]
% Algebraic function field defined over K3 by
% y4^3 + 2*y4 + 2*t0^126*y3
% Computing Genus...
% Took:  1212.800
% Invariants Took:  388.120
% [ 2057, 3329, 4113, 4550, 4826 ]
*/

//same, but with some lower order terms randomly added
procedure not_tower2()
	p := 3;
	K0<t0> := FunctionField(GF(p));

	P1<y1> := PolynomialRing(K0);
	f1 := t0^7;
	d1:=7;
	K1<y1> := FunctionField(y1^p - y1 - f1);
	
	P2<y2> := PolynomialRing(K1);
	f2 := y1 * t0^(14) +  t0^2;
	d2:= 49;
	Support(Divisor(f2));
	K2<y2> := FunctionField(y2^p - y2 - f2);
	
	print "Constructed Level 2";
	
	P3<y3> := PolynomialRing(K2);
	f3 := y2 * (t0^(42) + t0^20) + y1 * t0 ;
	d3:= 427;
	K3<y3> := FunctionField(y3^p - y3 - f3);
	
	print "Constructed Level 3";
	
	P4<y4>:=PolynomialRing(K3);
	f4 := y3 * t0^(126) + y2 * t0^5 + t0^2;
	d4:=3829;
	K4<y4> := FunctionField(y4^p - y4 - f4);
	
	print "Constructed Level 4";
		
	for L in [K1,K2,K3,K4] do
		print L;
		print default_anumber(L : powers:=5);
	end for;
end procedure;

/* Not Tower 2
Magma V2.25-6     Thu May  6 2021 13:10:33 on mathmagma [Seed = 1822379549]
Type ? for help.  Type <Ctrl>-D to quit.
Loading "other_examples"
[ (1/t0, 1/t0^5*y1^2), (t0, y1 + t0), (t0, y1 + t0 + 1), (t0, y1 + t0 + 2), 
(t0^10 + t0^8 + 2*t0^7 + t0^3 + 2*t0^2 + t0 + 2, y1 + 2*t0^8 + 2*t0^7 + 2*t0^6 +
    2*t0^5 + t0^4 + 2*t0^2), (t0^33 + 2*t0^31 + t0^30 + t0^29 + t0^28 + 2*t0^26 
    + 2*t0^25 + t0^24 + 2*t0^23 + 2*t0^22 + t0^20 + 2*t0^16 + t0^15 + t0^14 + 
    t0^10 + t0^9 + t0^7 + 2*t0^5 + 2*t0^4 + 2*t0 + 2, y1 + 2*t0^31 + t0^12) ]
[ -49, 2, 2, 2, 1, 1 ]
Constructed Level 2
Constructed Level 3
Constructed Level 4
Algebraic function field defined over Univariate rational function field over 
GF(3) by
y1^3 + 2*y1 + 2*t0^7
Computing Genus...
Genus is  6
Took:  0.040
Invariants Took:  0.000
[ 4, 5, 6, 6, 6 ]
Algebraic function field defined over K1 by
y2^3 + 2*y2 + 2*t0^14*y1 + 2*t0^2
Computing Genus...
Genus is  66
Took:  0.010
Invariants Took:  0.050
[ 27, 39, 49, 54, 58 ]
Algebraic function field defined over K2 by
y3^3 + 2*y3 + (2*t0^42 + 2*t0^20)*y2 + 2*t0*y1
Computing Genus...
Genus is  624
Took:  1.160
Invariants Took:  3.590
[ 231, 353, 429, 479, 508 ]
Algebraic function field defined over K3 by
y4^3 + 2*y4 + 2*t0^126*y3 + 2*t0^5*y2 + 2*t0^2
Computing Genus...
Genus is  5700
Took:  1399.650
Invariants Took:  403.920
[ 2025, 3079, 3806, 4305, 4628 ]

Total time: 1829.089 seconds, Total memory usage: 303.47MB*/




